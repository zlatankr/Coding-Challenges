# -*- coding: utf-8 -*-
"""
Created on Mon Dec 21 10:14:43 2015

@author: zlatan.kremonic
"""

"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

import numpy as np
import timeit
from collections import Counter

# function for identifying the Nth triangle number
def tri_num(n):
    return sum(xrange(1, n+1))

# identify all the prime factors
def primes(n):
    primfac = []
    d = 2
    while d*d <= n:
        while (n % d) == 0:
            primfac.append(d)  # supposing you want multiple factors repeated
            n //= d
        d += 1
    if n > 1:
       primfac.append(n)
    return primfac
    
def num_twelve(c):
    start_t = timeit.default_timer()
    a = 10
    while a > 0:
        if np.product([i+1 for i in Counter(primes(tri_num(a))).values()]) > c:
            print tri_num(a)
            print 'Runtime > ', timeit.default_timer() - start_t, ' seconds'
            return            
        a += 1
